// üì¶ index.js | BalticPharma V2 ‚Äî FINAL IMMORTAL v1.6 DEPLOY-LOCK DIAMOND EDITION

import dotenv from "dotenv";
dotenv.config();

import { readFile } from "fs/promises";
import { initBotInstance, BOT } from "./config/config.js";
import { registerMainHandler } from "./core/handlers/mainHandler.js";
import { autoExpireSessions } from "./core/sessionManager.js";

// ‚Äî Inicializuojam bot instancijƒÖ
initBotInstance();

// ‚Äî Registruojam pagrindinƒØ handlerƒØ
registerMainHandler(BOT.INSTANCE);

// ‚Äî Periodinis session cleanup kas 10 min.
setInterval(() => {
  try {
    autoExpireSessions();
  } catch (err) {
    console.error("‚ùå [autoExpireSessions error]:", err.message);
  }
}, 10 * 60 * 1000);

// ‚Äî Paleidimo informacija + ≈æinutƒó adminui
(async () => {
  try {
    if (!BOT.INSTANCE?.getMe) throw new Error("BOT.INSTANCE unknown or wrong.");

    const me = await BOT.INSTANCE.getMe();
    const version = JSON.parse(await readFile(new URL("./package.json", import.meta.url), "utf8"))?.version || "1.0.0";
    const now = new Date().toLocaleString("en-GB");

    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë ‚úÖ BALTICPHARMACY HAD STARTED ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
v${version} ‚Äî ${now}
Prisijungta kaip: @${me.username} (${me.first_name})
    `);

    if (BOT.ADMIN_ID && !isNaN(BOT.ADMIN_ID)) {
      await BOT.INSTANCE.sendMessage(
        BOT.ADMIN_ID,
        `‚úÖ *BALTICPHARMACYBOT v${version}* successfully launched!\nüïí Time: *${now}*`,
        { parse_mode: "Markdown" }
      ).catch((e) => {
        console.warn("‚ö†Ô∏è Failed to send admin message:", e.message);
      });
    }

  } catch (err) {
    console.error("‚ùå Start error:", err.message || err);

    if (BOT.ADMIN_ID && !isNaN(BOT.ADMIN_ID)) {
      try {
        await BOT.INSTANCE?.sendMessage(
          BOT.ADMIN_ID,
          `‚ùóÔ∏è *Bot broke during launch!*\n\nüïí Error Time: *${new Date().toLocaleString("lt-LT")}*`,
          { parse_mode: "Markdown" }
        );
      } catch {}
    }

    process.exit(1);
  }
})();

// ‚Äî Gaudo fatalius nul≈´≈æimus
process.on("uncaughtException", async (err) => {
  console.error("‚ùå Fatal error (exception):", err);
  if (BOT.ADMIN_ID && !isNaN(BOT.ADMIN_ID)) {
    try {
      await BOT.INSTANCE?.sendMessage(
        BOT.ADMIN_ID,
        `‚ùóÔ∏è *BOT IS BROKEN DOWN!*\n\nüí• Error: \`${err.message || "Unknown"}\``,
        { parse_mode: "Markdown" }
      );
    } catch {}
  }
  process.exit(1);
});

process.on("unhandledRejection", async (reason) => {
  console.error("‚ùå Unhandled error (promise):", reason);
  if (BOT.ADMIN_ID && !isNaN(BOT.ADMIN_ID)) {
    try {
      await BOT.INSTANCE?.sendMessage(
        BOT.ADMIN_ID,
        `‚ùóÔ∏è *BOT IS BROKEN DOWN!*\n\nüí• Unhandled error: \`${reason?.message || reason}\``,
        { parse_mode: "Markdown" }
      );
    } catch {}
  }
  process.exit(1);
});

// ‚Äî Gaudo shutdown signalus (tyli mirtis)
["SIGINT", "SIGTERM", "SIGQUIT"].forEach((sig) => {
  process.on(sig, async () => {
    console.log(`\nüõë Received ${sig}, stopping the bot...`);
    try {
      await BOT.INSTANCE?.stopPolling();
      console.log("‚úÖ Bot successfully stopped.");
    } catch (e) {
      console.warn("‚ö†Ô∏è Error while stopping the bot:", e.message);
    }
    process.exit(0);
  });
});

console.log("‚úÖ BALTICPHARMACYBOT ‚Äî READY & BULLETPROOF RUNNING");
