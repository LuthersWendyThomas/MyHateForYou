import fs from "fs";
import path from "path";

// üìÅ Lokacijos
const dataDir = path.resolve("./data");
const bansFile = path.join(dataDir, "bans.json");
const tempBansFile = path.join(dataDir, "tempbans.json");

// üß† Atmintinƒó
const bannedUserIds = new Set();     // ‚õî Permanent
const temporaryBans = {};            // ‚è≥ Temporary

/**
 * üîí Saugus ID formatavimas
 */
function safeString(input) {
  return typeof input === "string" ? input.trim() : String(input || "").trim();
}

/**
 * üöÄ Inicializuoja sistemƒÖ (kvieƒçiamas automati≈°kai)
 */
export function initBans() {
  try {
    if (!fs.existsSync(dataDir)) fs.mkdirSync(dataDir, { recursive: true });

    if (!fs.existsSync(bansFile)) fs.writeFileSync(bansFile, "[]", "utf8");
    const perm = JSON.parse(fs.readFileSync(bansFile, "utf8"));
    if (Array.isArray(perm)) perm.forEach(id => bannedUserIds.add(safeString(id)));

    if (!fs.existsSync(tempBansFile)) fs.writeFileSync(tempBansFile, "{}", "utf8");
    const temp = JSON.parse(fs.readFileSync(tempBansFile, "utf8"));
    if (temp && typeof temp === "object") Object.assign(temporaryBans, temp);

    console.log(`‚úÖ Ban system loaded ‚Üí ${bannedUserIds.size} permanent | ${Object.keys(temporaryBans).length} temp`);
  } catch (err) {
    console.error("‚ùå [initBans error]:", err.message || err);
  }
}

// ‚è¨ Auto init
initBans();

// ‚Äî Fail≈≥ saugojimas
function saveBans() {
  try {
    fs.writeFileSync(bansFile, JSON.stringify([...bannedUserIds], null, 2), "utf8");
  } catch (err) {
    console.error("‚ùå [saveBans error]:", err.message);
  }
}

function saveTempBans() {
  try {
    fs.writeFileSync(tempBansFile, JSON.stringify(temporaryBans, null, 2), "utf8");
  } catch (err) {
    console.error("‚ùå [saveTempBans error]:", err.message);
  }
}

// ==============================
// üß© PUBLIC API
// ==============================

export function isBanned(userId) {
  try {
    const id = safeString(userId);
    const now = Date.now();

    if (temporaryBans[id]) {
      if (now < temporaryBans[id]) return true;
      delete temporaryBans[id];
      saveTempBans();
    }

    return bannedUserIds.has(id);
  } catch (err) {
    console.error("‚ùå [isBanned error]:", err.message);
    return false;
  }
}

export function banUser(userId) {
  try {
    const id = safeString(userId);
    if (!bannedUserIds.has(id)) {
      bannedUserIds.add(id);
      saveBans();
      console.log(`üö´ Banned permanently: ${id}`);
    }
  } catch (err) {
    console.error("‚ùå [banUser error]:", err.message);
  }
}

export function banUserTemporary(userId, minutes = 5) {
  try {
    const id = safeString(userId);
    const until = Date.now() + minutes * 60 * 1000;
    temporaryBans[id] = until;
    saveTempBans();
    console.log(`‚è≥ Temp banned: ${id} ‚Üí until ${new Date(until).toLocaleString("en-GB")}`);
  } catch (err) {
    console.error("‚ùå [banUserTemporary error]:", err.message);
  }
}

export function unbanUser(userId) {
  try {
    const id = safeString(userId);
    let changed = false;

    if (bannedUserIds.delete(id)) changed = true;
    if (temporaryBans[id]) {
      delete temporaryBans[id];
      changed = true;
    }

    if (changed) {
      saveBans();
      saveTempBans();
      console.log(`‚úÖ Unbanned: ${id}`);
    }
  } catch (err) {
    console.error("‚ùå [unbanUser error]:", err.message);
  }
}

export function listBannedUsers() {
  return [...bannedUserIds];
}

export function listTemporaryBans() {
  return Object.entries(temporaryBans).map(([id, until]) => ({
    userId: id,
    until: new Date(until).toLocaleString("en-GB")
  }));
}

export function getBansCount() {
  return bannedUserIds.size;
}

export function clearBans() {
  try {
    bannedUserIds.clear();
    saveBans();
    console.log("üßπ Cleared all permanent bans.");
  } catch (err) {
    console.error("‚ùå [clearBans error]:", err.message);
  }
}

export function clearTempBans() {
  try {
    for (const id in temporaryBans) delete temporaryBans[id];
    saveTempBans();
    console.log("üßº Cleared all temporary bans.");
  } catch (err) {
    console.error("‚ùå [clearTempBans error]:", err.message);
  }
}
